from y2019.intcode import Intcode
from lib.field import Field
from lib.array import product
from lib.regex import parse_numbers


def get_alignment_sum(field: Field):
    alignment_sum = 0

    for coord, value in field.enumerate():
        if value != "#":
            continue

        if all(field[c] == "#" for c in field.coords_around(*coord, diagonal=False)):
            alignment_sum += product(coord)

    return alignment_sum


def ascii_to_str(numbers: list[int]):
    return "".join(map(chr, numbers))


def str_to_ascii(string: str):
    return map(ord, string)


def solve_a(input_string: str):
    intcode = Intcode.parse_input(input_string, output_as_array=True)

    value = intcode.run()
    field = Field(ascii_to_str(value).strip())

    return get_alignment_sum(field)


INPUT = """\
A,B,B,C,C,A,B,B,C,A
R,4,R,12,R,10,L,12
L,12,R,4,R,12
L,12,L,8,R,10
n
"""


def solve_b(input_string: str):
    program = parse_numbers(input_string, include_negative=True)
    program[0] = 2
    intcode = Intcode(program, pause_on_input=True)

    test_input = str_to_ascii(INPUT)

    value = intcode.run(*test_input)

    return value


"""
Notes:

.............................R4.^>>>>.R12
....................................v....
....................................v....
....................................v....
....................................v....
....................................v....
....................................v....
....................................v....
....................................v....
....................................v....
....................................v....
....................................v....
......................L12.v<<<<<<<<<v.R10
..........................v..............
..........................v..............
..........................v..............
................<<<<<<<<<<<<^.L12........
..........................v.^............
..............^...v.......v.^............
..............^...v.......v.^............
..............^...v.......v.^.R10........
..............^...v.......v.^.^>>>>>>>>>> R4
..............^...v.......v.^.^......R4.v
..............^...v...L12.v>^>^>>>>>>>>.v
..............^...v.........^.^.......v.v
..............^...v.....R10.<<<<<<<<<<<<v R12
..............^...v..L12.L12..^.......v..
.......L8.<<<<^<<<v<<<^...<<<<^<<<<<<<v..
.R12......v...^...v...^...v...^......R12.
..^>>>>>>>>>>>>...v>>>>>>>>>>>>.L8.......
..^.......v..L12.L12..^...v..............
..^.......v...........^...v..............
..^.R4....v..L12......^...v..............
..<<<<<<<<<<<<^.......^...v..............
..........v...^.......^...v..............
<<<<<<<<<<v...^.......^...v..............
vL12.....R10..^.......^...v..............
v.............^.......^...v..............
v.............^.......^...v..............
v.............^.......<<<<v..............
v.............^......R12..R4.............
v.............^..........................
v.............^..........................
v.............^..........................
v..R10........^..........................
v...^>>>>>>>>>>.L12......................
v...^....................................
v>>>^>>>>.R10............................
L8..^...v................................
....^...v................................
....^...v................................
....^...v................................
....^...v................................
....^...v................................
....^...v................................
....^...v................................
....^...v................................
R12.<<<<v.R4.............................

R,4,R,12,R,10,L,12,L,12,R,4,R,12,L,12,R,4,R,12,L,12,L,8,R,10,L,12,L,8,R,10,R,4,R,12,R,10,L,12,L,12,R,4,R,12,L,12,R,4,R,12,L,12,L,8,R,10,R,4,R,12,R,10,L,12

a: R,4
b: R,12
c: R,10
d: L,12
e: L,8

abcd
dab
dab
dec
dec
abcd
dab
dab
dec
abcd

A = abcd: R,4,R,12,R,10,L,12 (19 chars)
B = dab: L,12,R,4,R,12 (14 chars) 
C = dec: L,12,L,8,R,10 (14 chars)

A,B,B,C,C,A,B,B,C,A
"""
